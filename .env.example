# --- Global Settings ----
SERVER_PORT=8080 # Default port for API Gateway

# --- API Gateway ----
# Load Balancer Algorithm: round-robin, least-connections, adaptive (custom)
LOADBALANCER_ALGORITHM=least-connections
LOADBALANCER_RETRIES=3
LOADBALANCER_CACHE_TTL_SECONDS=60

# Resilience4j Retry Settings for API Gateway
R4J_RETRY_MAX_ATTEMPTS=3
R4J_RETRY_WAIT_DURATION_MS=500

# Resilience4j Rate Limiter Settings for API Gateway
RATELIMITER_LIMIT_FOR_PERIOD=100 # Max requests per period
RATELIMITER_REFRESH_PERIOD_SECONDS=1 # Period in seconds
RATELIMITER_TIMEOUT_MS=500 # Timeout duration in milliseconds

# Health Check Settings for API Gateway (used by HealthCheckService)
HEALTHCHECK_ENABLED=true
HEALTHCHECK_INITIAL_DELAY_MS=15000 # Initial delay before the first health check
HEALTHCHECK_INTERVAL_MS=30000 # Interval between health checks
HEALTHCHECK_PATH=/actuator/health # Health endpoint path on backend services
HEALTHCHECK_TIMEOUT_MS=2000 # Timeout for each health check request

# --- Auth Service (auth_service) & API Gateway (for JWT validation) ----
# It should be at least 256 bits (32 bytes) long AFTER decoding for HS256 algorithm.
# Avoid URL-safe characters like '_' or '-' unless you modify the Java code to use Base64.getUrlDecoder().
# Generate a strong secret using e.g.: openssl rand -base64 32 (ensure output doesn't have illegal chars or re-encode)
# Example (GENERATE YOUR OWN):
# JWT_SECRET=yourStandardBase64EncodedSecretStringThatIsSufficientlyLongAndSecure
JWT_SECRET=yourStandardBase64EncodedSecretStringThatIsSufficientlyLongAndSecure

# JWT Expiration time in milliseconds (e.g., 1 hour = 3600000, 10 min = 600000)
JWT_EXPIRATION=3600000


# --- MongoDB (for auth_service) ----
SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/authdb 


